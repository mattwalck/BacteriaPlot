function result = loadData(folder, suffix, set)
    if strcmp(suffix,'min');
        t0 = 0;
        delta = 0.5;
        t_f = 100;
    elseif strcmp(suffix, 'ngperml')
        t0 = 1;
        delta = 1;
        t_f = 1000;
    end
        
    if isempty(set)
        set = [];
    else
        set = ['_', set];
    end
    ext = '.txt';
    result = [];
    A = cell(1, 500);
    k = [];

    for i=t0:delta:t_f
        filename = [folder, '\', num2str(i), suffix, set, ext];
        if exist(filename, 'file') == 2
            A{2*i+1} = readTXT(filename);
            k = [k, i];
        end
    end
    A = A(~cellfun('isempty',A));
    if isempty(A)
        return;
    end

    lambda = A{1}(:,1);
    B = [];
    for i=1:size(A,2)
        B = [B A{i}(:,2)];
    end

    result = [[0, k]; [lambda B]];
end

function data = readTXT(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   MR230 = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   MR230 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   MR230 = importfile('MR_230.txt', 15, 515);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/07/15 11:26:10

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 15;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Create output variable
data = cell2mat(raw);
end